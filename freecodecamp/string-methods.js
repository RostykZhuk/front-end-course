let str1 = 'I am the best frontend dev at the world';
let str2 = 'martin stydies Math in LpNu Lviv';
// Метод charAt() возвращает указанный символ из строки.Целое число от 0 до длины строки минус 1.
console.log(str1.charAt(0));
//Метод charCodeAt() возвращает числовое значение Юникода для символа по указанному индексу
console.log(str1.charCodeAt(2));
// Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.
console.log(str1.concat(str2));
// Метод endsWith() позволяет определить, заканчивается ли строка символами указанными в скобках, возвращая, соответственно, true или false.
console.log(str1.endsWith('d'));
// Статический метод String.fromCharCode() возвращает строку, созданную из указанной последовательности значений единиц кода UTF-16.
console.log(String.fromCharCode(55));
// Метод includes() проверяет, содержит ли строка заданную подстроку, и возвращает, соответственно true или false.
console.log(str2.includes('M'));
// Метод indexOf() возвращает индекс первого вхождения указанного значения в строковый объект String, на котором он был вызван, начиная с индекса fromIndex. Возвращает -1, если значение не найдено.
console.log(str2.indexOf('stydies'));
// Метод lastIndexOf() возвращает индекс последнего вхождения указанного значения в строковый объект String, на котором он был вызван, или -1, если ничего не было найдено. Поиск по строке ведётся от конца к началу, начиная с индекса fromIndex.
console.log(str2.lastIndexOf('v'));
//Метод match() возвращает получившиеся совпадения при сопоставлении строки с регулярным выражением.
console.log(str1.match(/world/g));
// Метод repeat() конструирует и возвращает новую строку, содержащую указанное количество соединённых вместе копий строки, на которой он был вызван.
console.log(str1.repeat(2));
// Метод replace() возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель. Шаблон может быть строкой или регулярным выражением, а заменитель может быть строкой или функцией, вызываемой при каждом сопоставлении.
console.log(str1.replace('world', 'WORLD'));
// Метод search() выполняет поиск сопоставления между регулярным выражением и этим объектом String.
console.log(str1.search('am'));
//Метод slice() извлекает часть строки и возвращает новую строку без изменения оригинальной строки.
console.log(str2.slice(2, 4));
// Метод split() разбивает объект String на массив строк путём разделения строки указанной подстрокой.
console.log(str1.split(''));
//Метод startsWith() помогает определить, начинается ли строка с символов указанных в скобках, возвращая, соответственно, true или false.
console.log(str1.startsWith('i'));
//Предупреждение: Внимание: так как String.prototype.substr(…) не полностью упразднена (а лишь "удалена из стандартов по вебу"), она считается унаследованной функцией, использование которой лучше избегать там, где это возможно. Она не является частью ядра языка JavaScript и может быть удалена в будущем. Если есть возможность, используйте метод substring().
console.log(str1.substr(2, 4));
// Метод substring() возвращает подстроку строки между двумя индексами, или от одного индекса и до конца строки.
console.log(str1.substring(2, 4));
//Метод toLowerCase() возвращает значение строки, на которой он был вызван, преобразованное в нижний регистр.
console.log(str1.toLowerCase());
//Метод toUpperCase() возвращает значение строки, на которой он был вызван, преобразованное в верхний регистр.
console.log(str1.toUpperCase());
//Метод trim() возвращает строку с вырезанными пробельными символами с её концов. Метод trim() не изменяет значение самой строки.
console.log(str1.trim());
